gdb_path = fr"E:\OneDrive\Research\GIS\Data\Testing.gdb"
test_input = gdb_path + fr"\even_yehuda"
from arcpy import CopyFeatures_management as CopyFeatures
segments_input_copy = CopyFeatures(test_input, "segments_input_copy")
segments_input_copy = CopyFeatures(test_input, gdb_path,"segments_input_copy")
gdb_path = fr"E:\OneDrive\Research\GIS\Data\Testings.gdb"
test_input = gdb_path + fr"\even_yehuda"
segments_input_copy = CopyFeatures(test_input, "segments_input_copy")
Delete(segments_input_copy)
from arcpy import Delete_management as Delete
Delete(segments_input_copy)
segments_input_copy = CopyFeatures(test_input, r"memory\segments_input_copy")
Delete(segments_input_copy)
Delete("segments_input_copy")
segments_input_copy = CopyFeatures(test_input, r"memory\segments_input_copy")
Delete("segments_input_copy")
test = 0123
test = 123
print(f"{test// 100:04d}{test% 100:02d}")
print(f"{test% 100:04d}{test// 100:02d}")
mmyy_int = 123
year = mmyy_int // 100     month = mmyy_int % 100      if year < 25:         year += 2000     else:         year += 1900              print(f"{year}/{str(month).zfill(2)}")
year = mmyy_int // 100 month = mmyy_int % 100  if year < 25:     year += 2000 else:     year += 1900
print(f"{year}/{str(month).zfill(2)}")
year
123 % 100
year = mmyy_int % 100     month = mmyy_int // 100
year = mmyy_int % 100   month = mmyy_int // 100
print(f"{year}/{str(month).zfill(2)}")
year = mmyy_int % 100 month = mmyy_int // 100  if year < 25:     year += 2000 else:     year += 1900
print(f"{year}/{str(month).zfill(2)}")
list = [1,2,3,4]
print(list)
list = ['1','2','3','4']
print(list)
blabla = "1234"
k = sort(blabla)
k = sorted(blabla)
blabla = []
blabla.append("ret")
k = sorted(blabla)
print(k[0])
print(k[-1])
as = [1,2,3,4,5] ", ".join(str(temp_code) for temp_code in as)
as = [1,2,3,4,5] print(", ".join(str(temp_code) for temp_code in as))
st = ['a','b','c']
as = [1,2,3,4,5] print(", ".join(str(temp_code) for temp_code in st))
my_list = [1, 2, 3, 4, 5]
result = ", ".join(str(num) for num in my_list)
print(result)
my_list = ["apple", "banana", "cherry"]
result = ", ".join(my_list)
print(result)
my_list = []
result = ", ".join(str(num) for num in my_list)
print(result)
import matlab.engine  # Start the MATLAB engine eng = matlab.engine.start_matlab()  # Example of running a MATLAB command result = eng.sqrt(16.0)  # MATLAB square root function print("Square root of 16:", result)
python -m pip install matlabengine
import sys  print("Python executable:", sys.executable) print("Python version:", sys.version)
import os import sys  # Get Python environment path python_home = os.environ.get("PYTHONHOME", "Unknown") print("PYTHONHOME environment variable:", python_home)  # Get Python executable print("Python executable:", sys.exec_prefix + r"\python.exe")  # Check version import platform print("Python version:", platform.python_version())
abc = "blabla"
arcpy.AddMessage("PYTHONHOME environment variable:", abc)
import matlab.engine eng = matlab.engine.start_matlab() a = 2 b = 3 eng.plus(a,b)
import matlab.engine eng = matlab.engine.start_matlab() tf = eng.isprime(37) print(tf)
import matlab print(matlab.__file__)
import matlab.engine eng = matlab.engine.start_matlab() tf = eng.isprime(37) print(tf)
import matlab.engine eng = matlab.engine.start_matlab() result = eng.sqrt(4.0) print("Result from MATLAB:", result)
import matlab.engine
import matlab.engine eng = matlab.engine.start_matlab() result = eng.sqrt(4.0) print("Result from MATLAB:", result)
python --v
python --version
--version
import matlab.engine
import matlab
import arcpy from arcpy import mp  # Access the current ArcGIS Pro project aprx = arcpy.mp.ArcGISProject("CURRENT")  # List toolboxes in the project and select the one you need toolbox = aprx.listToolboxes("ResearchToolbox")[0]  # Import the toolbox arcpy.ImportToolbox(toolbox)
import arcpy from arcpy import mp  # Access the current ArcGIS Pro project aprx = arcpy.mp.ArcGISProject("CURRENT")  # List toolboxes in the project and select the one you need toolbox = aprx.toolboxes("ResearchToolbox")[0]  # Import the toolbox arcpy.ImportToolbox(toolbox)
toolbox = aprx.toolboxes
toolbox[1]
import arcpy  # Access the current ArcGIS Pro project aprx = arcpy.mp.ArcGISProject("CURRENT")  # Loop through the toolboxes to find the one you need for toolbox in aprx.toolboxes:     if toolbox.name == "ResearchToolbox":         # Import the toolbox         arcpy.ImportToolbox(toolbox)         print("found")         break
import arcpy  # Access the current ArcGIS Pro project aprx = arcpy.mp.ArcGISProject("CURRENT")  # Access the toolbox by its name toolbox_name = "ResearchToolbox" if toolbox_name in aprx.toolboxes:     toolbox = aprx.toolboxes[toolbox_name]          # Import the toolbox     arcpy.ImportToolbox(toolbox)          # Call your custom tool from the toolbox     print("found toolbox") else:     print(f"Toolbox '{toolbox_name}' not found in the project.")
import arcpy  # Access the current ArcGIS Pro project aprx = arcpy.mp.ArcGISProject("CURRENT")  # Loop through the toolboxes to find the one you need by matching its full path toolbox_name = "ResearchToolbox" for toolbox in aprx.toolboxes:     if toolbox_name in toolbox:         # Import the toolbox         arcpy.ImportToolbox(toolbox)                  # Call your custom tool from the toolbox         print("OK")         break else:     print(f"Toolbox '{toolbox_name}' not found in the project.")
import arcpy  # Access the current ArcGIS Pro project aprx = arcpy.mp.ArcGISProject("CURRENT")  # Loop through the toolboxes to find the one you need by matching its full path toolbox_name = "ResearchToolbox.atbx" for toolbox in aprx.toolboxes:     if toolbox_name in toolbox:         # Import the toolbox         arcpy.ImportToolbox(toolbox)                  # Call your custom tool from the toolbox         print("OK")         break else:     print(f"Toolbox '{toolbox_name}' not found in the project.")
import arcpy  # Access the current ArcGIS Pro project aprx = arcpy.mp.ArcGISProject("CURRENT")  # Access the toolbox by its name toolbox_name = "ResearchToolbox.atbx" if toolbox_name in aprx.toolboxes:     toolbox = aprx.toolboxes[toolbox_name]          # Import the toolbox     arcpy.ImportToolbox(toolbox)          # Call your custom tool from the toolbox     arcpy.MyCustomToolbox_MyCustomTool(InputParameter1, InputParameter2, OutputParameter) else:     print(f"Toolbox '{toolbox_name}' not found in the project.")
import arcpy  # Access the current ArcGIS Pro project aprx = arcpy.mp.ArcGISProject("CURRENT")  # Print all the toolboxes found in the current project for toolbox in aprx.toolboxes:     print(toolbox)  # This will print the full path of each toolbox
import arcpy  # Access the current ArcGIS Pro project aprx = arcpy.mp.ArcGISProject("CURRENT")  # Loop through the toolboxes to find the one you need by checking 'toolboxPath' toolbox_name = "ResearchToolbox.atbx"  # Replace with the actual name of your toolbox for toolbox_info in aprx.toolboxes:     if toolbox_name in toolbox_info['toolboxPath']:         # Import the toolbox using the full path from 'toolboxPath'         arcpy.ImportToolbox(toolbox_info['toolboxPath'])                  # Call your custom tool from the toolbox         print("FOUND THE BASTARD!!!")         break else:     print(f"Toolbox '{toolbox_name}' not found in the project.")
import arcpy  def get_tool_from_toolbox(toolbox_name, tool_name):     """     Given a toolbox name and tool name, import the toolbox and return the tool as a custom alias.     """     # Access the current ArcGIS Pro project     aprx = arcpy.mp.ArcGISProject("CURRENT")      # Loop through the toolboxes to find the one you need by checking 'toolboxPath'     for toolbox_info in aprx.toolboxes:         if toolbox_name in toolbox_info['toolboxPath']:             # Import the toolbox using the full path from 'toolboxPath'             arcpy.ImportToolbox(toolbox_info['toolboxPath'])                          # Return the tool as a custom alias             return getattr(arcpy, f"{toolbox_name}_{tool_name}")          # If the toolbox isn't found, return None     print(f"Toolbox '{toolbox_name}' not found in the project.")     return None
MyCustomTool = get_tool_from_toolbox("ResearchToolbox", "MyCustomTool")
MyCustomTool = get_tool_from_toolbox("ResearchToolbox", "FindLoops")
import arcpy  def get_tool_from_toolbox(toolbox_name, tool_name):     """     Given a toolbox name and tool name, import the toolbox and return the tool as a custom alias.     """     # Access the current ArcGIS Pro project     aprx = arcpy.mp.ArcGISProject("CURRENT")      # Loop through the toolboxes to find the one you need by checking 'toolboxPath'     for toolbox_info in aprx.toolboxes:         if toolbox_name in toolbox_info['toolboxPath']:             # Import the toolbox using the full path from 'toolboxPath'             arcpy.ImportToolbox(toolbox_info['toolboxPath'])                          # Build the tool name dynamically             tool_full_name = f"{toolbox_name}_{tool_name}"                          # Check if the tool exists in arcpy and return it             if hasattr(arcpy, tool_full_name):                 return getattr(arcpy, tool_full_name)             else:                 print(f"Tool '{tool_full_name}' not found in the toolbox.")                 return None          # If the toolbox isn't found, return None     print(f"Toolbox '{toolbox_name}' not found in the project.")     return None
MyCustomTool = get_tool_from_toolbox("ResearchToolbox", "FindLoops")
import arcpy  # Access the current ArcGIS Pro project aprx = arcpy.mp.ArcGISProject("CURRENT")  # Loop through the toolboxes to find the one you need by checking 'toolboxPath' toolbox_name = "ResearchToolbox.atbx"  # Replace with the actual name of your toolbox for toolbox_info in aprx.toolboxes:     if toolbox_name in toolbox_info['toolboxPath']:         # Import the toolbox using the full path from 'toolboxPath'         arcpy.ImportToolbox(toolbox_info['toolboxPath'])          # Assign an alias for the tool         MyTool = arcpy.ResearchToolbox_MyCustomTool                  # Call the tool using the alias         print("OK")         break else:     print(f"Toolbox '{toolbox_name}' not found in the project.")
import arcpy  # Access the current ArcGIS Pro project aprx = arcpy.mp.ArcGISProject("CURRENT")  # Loop through the toolboxes to find the one you need by checking 'toolboxPath' toolbox_name = "ResearchToolbox.atbx"  # Replace with the actual name of your toolbox for toolbox_info in aprx.toolboxes:     if toolbox_name in toolbox_info['toolboxPath']:         # Import the toolbox using the full path from 'toolboxPath'         arcpy.ImportToolbox(toolbox_info['toolboxPath'])          # Assign an alias for the tool         MyTool = arcpy.ResearchToolbox_FindLoops                  # Call the tool using the alias         print("OK")         break else:     print(f"Toolbox '{toolbox_name}' not found in the project.")
import arcpy  # Access the current ArcGIS Pro project aprx = arcpy.mp.ArcGISProject("CURRENT")  # Loop through the toolboxes to find the one you need by checking 'toolboxPath' toolbox_name = "ResearchToolbox.atbx"  # Replace with the actual name of your toolbox for toolbox_info in aprx.toolboxes:     if toolbox_name in toolbox_info['toolboxPath']:         # Import the toolbox using the full path from 'toolboxPath'         arcpy.ImportToolbox(toolbox_info['toolboxPath'])                  # Call your custom tool from the toolbox         print("OK")         break else:     print(f"Toolbox '{toolbox_name}' not found in the project.")
arcpy.ResearchToolbox_ScriptMatlab(4)
import arcpy  def list_tools_in_toolbox(toolbox_path):     """     List all the tools in the given toolbox path.     """     try:         # Import the toolbox         arcpy.ImportToolbox(toolbox_path)          # List all the tools in the toolbox         tools = arcpy.ListTools(toolbox_path)                  # Print all the tool names         for tool in tools:             print(f"Tool found: {tool}")     except Exception as e:         print(f"Error: {e}")  # Access the current ArcGIS Pro project aprx = arcpy.mp.ArcGISProject("CURRENT")  # Loop through the toolboxes and check for the toolbox path for toolbox_info in aprx.toolboxes:     if "ResearchToolbox" in toolbox_info['toolboxPath']:         list_tools_in_toolbox(toolbox_info['toolboxPath'])
# Access the current ArcGIS Pro project aprx = arcpy.mp.ArcGISProject("CURRENT")  # Loop through the toolboxes to find the one you need by checking 'toolboxPath' toolbox_name = "ResearchToolbox.atbx"  # Replace with the actual name of your toolbox for toolbox_info in aprx.toolboxes:     if toolbox_name in toolbox_info['toolboxPath']:         # Import the toolbox using the full path from 'toolboxPath'         arcpy.ImportToolbox(toolbox_info['toolboxPath'])                  # Call your custom tool from the toolbox         print("OK")         break else:     print(f"Toolbox '{toolbox_name}' not found in the project.")
# Create a list of tools in the Analysis toolbox tools = arcpy.ListTools("*_ResearchToolbox")  # Loop through the list and print each tool's usage. for tool in tools:     print(arcpy.Usage(tool))
# Create a list of tools in the Analysis toolbox tools = arcpy.ListTools("ResearchToolbox")  # Loop through the list and print each tool's usage. for tool in tools:     print(arcpy.Usage(tool))
# Now call the function to get the tool MyTool = get_tool_from_toolbox("ResearchToolbox", "ScriptMatlab")  # Use the tool if it was found if MyTool:     MyTool(4) else:     print("The tool was not found.")
import arcpy  def get_tool_from_toolbox(toolbox_name, tool_name):     """     Given a toolbox name and tool name, import the toolbox and return the tool as a custom alias.     """     # Access the current ArcGIS Pro project     aprx = arcpy.mp.ArcGISProject("CURRENT")      # Loop through the toolboxes to find the one you need by checking 'toolboxPath'     for toolbox_info in aprx.toolboxes:         if toolbox_name in toolbox_info['toolboxPath']:             # Import the toolbox using the full path from 'toolboxPath'             arcpy.ImportToolbox(toolbox_info['toolboxPath'])                          # Correctly create the tool name: ToolName_ToolboxName             tool_full_name = f"{tool_name}_{toolbox_name}"                          # Check if the tool exists in arcpy and return it             if hasattr(arcpy, tool_full_name):                 return getattr(arcpy, tool_full_name)             else:                 print(f"Tool '{tool_full_name}' not found in the toolbox.")                 return None          # If the toolbox isn't found, return None     print(f"Toolbox '{toolbox_name}' not found in the project.")     return None
# Now call the function to get the tool MyTool = get_tool_from_toolbox("ResearchToolbox", "TestScript")  # Use the tool if it was found if MyTool:     MyTool(4) else:     print("The tool was not found.")
def get_tool_parameters(tool):     """     Given a tool, print out the number of parameters and their types.     """     # Check the tool parameters using arcpy's toolinfo method     tool_info = arcpy.GetParameterInfo(tool)          # Print number of parameters     print(f"Tool '{tool.__name__}' has {len(tool_info)} parameters.")          # Print out parameter types     for idx, param in enumerate(tool_info):         print(f"Parameter {idx + 1}: {param.name}, Type: {param.parameterType}")
# Now call the function to get the tool MyTool = get_tool_from_toolbox("ResearchToolbox", "CreateFilteredControlPointsFeatureClass")  # Use the tool if it was found if MyTool:     get_tool_parameters(MyTool) else:     print("The tool was not found.")
import arcpy  def get_tool_parameters(tool):     """     Given a tool, print out the number of parameters and their types.     """     try:         # Access tool's parameter info (if available)         tool_info = arcpy.GetParameterInfo(tool)                  # Print number of parameters         print(f"Tool '{tool.__name__}' has {len(tool_info)} parameters.")                  # Print out parameter details (name, type, etc.)         for idx, param in enumerate(tool_info):             print(f"Parameter {idx + 1}:")             print(f"  Name: {param.name}")             print(f"  Type: {param.parameterType}")             print(f"  Direction: {param.parameterDirection}")             print(f"  Required: {param.required}")             print("-" * 40)  # Just for separating the output     except Exception as e:         print(f"Error: {e}")   def get_tool_from_toolbox(toolbox_name, tool_name):     """     Given a toolbox name and tool name, import the toolbox and return the tool as a custom alias.     """     aprx = arcpy.mp.ArcGISProject("CURRENT")      for toolbox_info in aprx.toolboxes:         if toolbox_name in toolbox_info['toolboxPath']:             # Import the toolbox using the full path from 'toolboxPath'             arcpy.ImportToolbox(toolbox_info['toolboxPath'])              # Correctly create the tool name: ToolName_ToolboxName             tool_full_name = f"{tool_name}_{toolbox_name}"              # Check if the tool exists in arcpy and return it             if hasattr(arcpy, tool_full_name):                 tool = getattr(arcpy, tool_full_name)                 get_tool_parameters(tool)  # Check tool parameters                 return tool             else:                 print(f"Tool '{tool_full_name}' not found in the toolbox.")                 return None          print(f"Toolbox '{toolbox_name}' not found in the project.")     return None   # Example of usage: # Retrieve the tool from the toolbox and inspect its parameters MyTool = get_tool_from_toolbox("ResearchToolbox", "CreateFilteredControlPointsFeatureClass")
import arcpy  def get_tool_from_toolbox(toolbox_name, tool_name):     """     Given a toolbox name and tool name, import the toolbox and return the tool as a custom alias.     """     # Access the current ArcGIS Pro project     aprx = arcpy.mp.ArcGISProject("CURRENT")      # Loop through the toolboxes to find the one you need by checking 'toolboxPath'     for toolbox_info in aprx.toolboxes:         if toolbox_name in toolbox_info['toolboxPath']:             # Import the toolbox using the full path from 'toolboxPath'             arcpy.ImportToolbox(toolbox_info['toolboxPath'])                          # Correctly create the tool name: ToolName_ToolboxName             tool_full_name = f"{tool_name}_{toolbox_name}"                          # Check if the tool exists in arcpy and return it             if hasattr(arcpy, tool_full_name):                 return getattr(arcpy, tool_full_name)             else:                 print(f"Tool '{tool_full_name}' not found in the toolbox.")                 return None          # If the toolbox isn't found, return None     print(f"Toolbox '{toolbox_name}' not found in the project.")     return None 	 # Now call the function to get the tool MyTool = get_tool_from_toolbox("ResearchToolbox", "TestScript")  # Use the tool if it was found if MyTool:     MyTool(4) else:     print("The tool was not found.")
import arcpy  # Get the active map and the layer you want to check (you can modify the layer name as needed) aprx = arcpy.mp.ArcGISProject("CURRENT")  # This refers to the currently open ArcGIS Pro project map_obj = aprx.activeMap  # Get the active map layer_name = "נקודות בקרה"  # Replace with your layer name  # Get the layer object from the map layer = None for lyr in map_obj.layers:     if lyr.name == layer_name:         layer = lyr         break  if layer:     # Get the layer's feature class path     fc = layer.dataSource      # Check if the feature class has Z-values     desc = arcpy.Describe(fc)     if desc.hasZ:         print(f"Z-values are defined for the layer: {layer_name}")         # Check which field is used for Z-values         if 'Shape_Z' in [field.name for field in arcpy.ListFields(fc)]:             print("Z-values are stored in the 'Shape_Z' field.")         else:             print("Z-values are stored in a different field.")
import arcpy  # Get the active map and the layer you want to check (you can modify the layer name as needed) aprx = arcpy.mp.ArcGISProject("CURRENT")  # This refers to the currently open ArcGIS Pro project map_obj = aprx.activeMap  # Get the active map layer_name = "נקודות בקרה"  # Replace with your layer name  # Get the layer object from the map layer = None for lyr in map_obj.listLayers():     if lyr.name == layer_name:         layer = lyr         break  if layer:     # Get the layer's feature class path     fc = layer.dataSource      # Check if the feature class has Z-values     desc = arcpy.Describe(fc)     if desc.hasZ:         print(f"Z-values are defined for the layer: {layer_name}")         # Check which field is used for Z-values         if 'Shape_Z' in [field.name for field in arcpy.ListFields(fc)]:             print("Z-values are stored in the 'Shape_Z' field.")         else:             print("Z-values are stored in a different field.")     else:         print(f"Z-values are not defined for the layer: {layer_name}") else:     print(f"Layer {layer_name} not found in the map.")
import matlab.engine
eng = matlab.engine.start_matlab()
result = eng.sqrt(16.0)
print(result)
eng.quit()
