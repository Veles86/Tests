clc
clear all
close all



[fileName,path] = uigetfile('*.DAT','Select DAT file');
fid = fopen(strcat(path,fileName),'r');
f = fread(fid,'*char')';
fclose(fid);



inputData = splitlines(string(f));

rows_end = contains(inputData,'End-Line');
rows_cont = contains(inputData,'Cont-Line');
rows_tot = rows_end(1:end-1).*rows_cont(2:end);
ind = find(rows_tot);

for i = 1 : length(ind)
inputData(ind(i)-2:ind(i)+1) = [];
    
end

inputData(contains(inputData,'#####')) = [];
inputData(contains(inputData,'repeated')) = [];
inputData = strrep(inputData,'|',' ');

startLineNum = find(contains(inputData,'Start-Line'));
endLineNum  = find(contains(inputData,'End-Line'));

if (length(startLineNum)>1) || (length(endLineNum)>1)
    ERROR(strcat('too many start or end lines in file: ',fileName));
end

if startLineNum~=4
    ERROR(strcat('Start-line is not at the proper position in file: ',fileName));
end


tempRow = split(inputData(startLineNum));

if tempRow(7)=="BF"
    measMode = 1;
elseif tempRow(7)=="BFFB"
    measMode = 2;
else
    error(strcat('unknown measurement mode in file:',fileName));
end

tempRow = split(inputData(startLineNum-3));
if (tempRow(6)~=fileName)
    warning(strcat('Actual name of file is different from what appears in the file itsels in:',fileName))
end

tempRow = split(inputData(startLineNum-2));
tempDate = tempRow(6);
if (length(tempRow))==7
    date = tempDate;
    surveyor = tempRow(7);
elseif (length(tempRow))==6
    tempDate = char(tempDate);
    date= string(tempDate(1:6));
    surveyor = string(tempDate(7:end));
else
   warning(strcat('wrong date input in file:',fileName));
   date='0000';
   surveyor='';
end


tempRow = split(inputData(startLineNum-1));

instrumentNumber = tempRow(6);
rod1Num = tempRow(7);
rod2Num = tempRow(8);
envConditions = tempRow(9);

coreData = inputData(startLineNum+1:endLineNum-1);
if measMode == 1
    stationSumRows = coreData(1:3:end);
    totalSumRows =  coreData(end-1:end);
    measData = coreData;
    measData(1:3:end) = [];
    measData(end-1:end) = [];
else
    stationSumRows = coreData(1:5:end);
    totalSumRows =  coreData(end-1:end);
    measData = coreData;
    measData(1:5:end) = [];
    measData(end-1:end) = [];
end

measData=split(measData);
measData = measData(:,[6,7,11,12,15]);
measDataBack = array2table(measData(measData(:,3)=="Rb",[1 2 4 5]),'VariableNames',["pointName","temp","readVal","measDist"]);
measDataFore = array2table(measData(measData(:,3)=="Rf",[1 2 4 5]),'VariableNames',["pointName","temp","readVal","measDist"]);
measDataBack.temp = double(measDataBack.temp);
measDataBack.readVal = double(measDataBack.readVal);
measDataBack.measDist = double(measDataBack.measDist);
measDataFore.temp = double(measDataFore.temp);
measDataFore.readVal = double(measDataFore.readVal);
measDataFore.measDist = double(measDataFore.measDist);

startPoint = measData(1,1);
endPoint = measData(end,1);
% stationSumRows = split(stationSumRows);


tempRow=split(totalSumRows(1));
dH_tot = double(tempRow(9));
H0 = double(tempRow(15));

tempRow=split(totalSumRows(2));
n_stations = double(tempRow(7));
dist_back = double(tempRow(10));
dist_fore = double(tempRow(13));
H1 = double(tempRow(16));

%%
if length(unique(measDataBack.pointName))~=length(unique(measDataFore.pointName))
    warning(strcat('different number of point names used between back and fore readings in file: ',fileName));
end

if ((length(unique(measDataBack.pointName))/measMode)~=n_stations) || ((length(unique(measDataFore.pointName))/measMode)~=n_stations)
    warning(strcat('wrong number of stations appearing in file: ',fileName));
end

dH_calc = round(sum(measDataBack.readVal-measDataFore.readVal)/measMode,5);

if abs(dH_calc-dH_tot)>0.00001

   warning(strcat('wrong total dH value appearing in file: ',fileName));

end


dist_back_calc = round(sum(measDataBack.measDist)/measMode,3);
dist_fore_calc = round(sum(measDataFore.measDist)/measMode,3);

if abs(dist_back_calc - dist_back)>0.001 || abs(dist_fore_calc - dist_fore)>0.001
    warning(strcat('wrong total dist value appearing in file: ',fileName));
end

dist_tot = round(dist_back_calc+dist_fore_calc);




% function [outputArg1,outputArg2] = NumOfDigits(inputArg1,inputArg2)
% %UNTITLED Summary of this function goes here
% %   Detailed explanation goes here
% outputArg1 = inputArg1;
% outputArg2 = inputArg2;
% end